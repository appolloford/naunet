{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Naunet Introduction Naunet is a general-purpose astrochemistry tool modeling the chemical evolution in the universe. It can work with the network from KIDA or UMIST databases. KROME users can also easily bring their original network files here. The idea of Naunet is acting as a code-generator to generate C++ codes according to the input chemical network. These codes are prepared for the CVODE differential equation solver in SUNDIALS package and Odeint in boost library. For the multiple methods implemented in CVODE and Odeint , Naunet is capable of generating different codes for the methods. These codes can be compiled into libraries to be flexibly used. System requirements Naunet requires Python 3.8+, CMake 3.18+, and a compiler supporting C++11. Depending on the solver, users also have to install SUNDIALS > 5.6.1 or 1.65.0 < Boost < 1.75.0. We recommend users to start from SUNDIALS 5.7.0, which has been tested in the Github environment. Only CVODE is used in the projects, so it should be possible to only install CVODE. If you are using KLU solver, SuiteSparse is required by SUNDIALS. Similarly, if you are using the cuSolverSp_batchQR solver, then CUDA is required by SUNDIALS. Installation Naunet can be installed by pip: ~ $ pip install naunet CAVEAT: Naunet is still under developing. This may not install the latest version. To install the latest version, clone the directory from Github and install from the directory: ~ $ git clone https://github.com/appolloford/naunet ~ $ cd naunet ~ $ pip install . Getting started To use Naunet, you will have to prepare a network. Here we will start from a prepared example network. First, let's create a folder and create the example in it. ~ $ mkdir naunet_test && cd naunet_test ~ $ naunet example --select=0 If you call naunet example , it will show a list of all available examples. You can pick one of them as you like.","title":"Home"},{"location":"#welcome-to-naunet","text":"","title":"Welcome to Naunet"},{"location":"#introduction","text":"Naunet is a general-purpose astrochemistry tool modeling the chemical evolution in the universe. It can work with the network from KIDA or UMIST databases. KROME users can also easily bring their original network files here. The idea of Naunet is acting as a code-generator to generate C++ codes according to the input chemical network. These codes are prepared for the CVODE differential equation solver in SUNDIALS package and Odeint in boost library. For the multiple methods implemented in CVODE and Odeint , Naunet is capable of generating different codes for the methods. These codes can be compiled into libraries to be flexibly used.","title":"Introduction"},{"location":"#system-requirements","text":"Naunet requires Python 3.8+, CMake 3.18+, and a compiler supporting C++11. Depending on the solver, users also have to install SUNDIALS > 5.6.1 or 1.65.0 < Boost < 1.75.0. We recommend users to start from SUNDIALS 5.7.0, which has been tested in the Github environment. Only CVODE is used in the projects, so it should be possible to only install CVODE. If you are using KLU solver, SuiteSparse is required by SUNDIALS. Similarly, if you are using the cuSolverSp_batchQR solver, then CUDA is required by SUNDIALS.","title":"System requirements"},{"location":"#installation","text":"Naunet can be installed by pip: ~ $ pip install naunet CAVEAT: Naunet is still under developing. This may not install the latest version. To install the latest version, clone the directory from Github and install from the directory: ~ $ git clone https://github.com/appolloford/naunet ~ $ cd naunet ~ $ pip install .","title":"Installation"},{"location":"#getting-started","text":"To use Naunet, you will have to prepare a network. Here we will start from a prepared example network. First, let's create a folder and create the example in it. ~ $ mkdir naunet_test && cd naunet_test ~ $ naunet example --select=0 If you call naunet example , it will show a list of all available examples. You can pick one of them as you like.","title":"Getting started"},{"location":"API/reaction/","text":"Reaction Modules Reaction Abstract interface of reaction. Inherit this class to customize a new reaction definition. create_species ( self , species_name ) Create a Species instance if the name is not a pseudo element (e.g. CR, CRPHOT), else return None Parameters: Name Type Description Default species_name str name of species required Returns: Type Description Species Species: Species instance of the input name Source code in naunet/reactions/reaction.py def create_species ( self , species_name : str ) -> Species : \"\"\" Create a Species instance if the name is not a pseudo element (e.g. CR, CRPHOT), else return None Args: species_name (str): name of species Returns: Species: Species instance of the input name \"\"\" if species_name and species_name not in Species . known_pseudoelements (): return Species ( species_name ) finalize () classmethod Reset settings / class attributes if needed Source code in naunet/reactions/reaction.py @classmethod def finalize ( cls ) -> None : \"\"\" Reset settings / class attributes if needed \"\"\" pass initialize () classmethod Change settings / class attributes if needed Source code in naunet/reactions/reaction.py @classmethod def initialize ( cls ) -> None : \"\"\" Change settings / class attributes if needed \"\"\" pass preprocessing ( line ) classmethod Preprocess the input reaction string before initialize a reaction. Called in Network class to deal with input with special meanings. Parameters: Name Type Description Default line str input string of a reaction required Returns: Type Description str str: proceeded input string Source code in naunet/reactions/reaction.py @classmethod def preprocessing ( cls , line : str ) -> str : \"\"\" Preprocess the input reaction string before initialize a reaction. Called in Network class to deal with input with special meanings. Args: line (str): input string of a reaction Returns: str: proceeded input string \"\"\" return line rate_func ( self ) Abstract method should be implemented by child class. Return the reaction rate expression. Source code in naunet/reactions/reaction.py @abstractmethod def rate_func ( self ): \"\"\" Abstract method should be implemented by child class. Return the reaction rate expression. Raises: NotImplementedError \"\"\" raise NotImplementedError rpeq ( self , o ) Compare two reactions by their reactants and products. Parameters: Name Type Description Default o object other reaction instance required Returns: Type Description bool bool: True if the reactants and products are the same in two reactions. Otherwise False Source code in naunet/reactions/reaction.py def rpeq ( self , o : object ) -> bool : \"\"\" Compare two reactions by their reactants and products. Args: o (object): other reaction instance Returns: bool: True if the reactants and products are the same in two reactions. Otherwise False \"\"\" return Counter ( self . reactants ) == Counter ( o . reactants ) and Counter ( self . products ) == Counter ( o . products ) ReactionType The definition of reaction types. Types are categorized by phases (gas, grain, surface) and then divided to sub-groups","title":"reaction"},{"location":"API/reaction/#reaction-modules","text":"","title":"Reaction Modules"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction","text":"Abstract interface of reaction. Inherit this class to customize a new reaction definition.","title":"Reaction"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.create_species","text":"Create a Species instance if the name is not a pseudo element (e.g. CR, CRPHOT), else return None Parameters: Name Type Description Default species_name str name of species required Returns: Type Description Species Species: Species instance of the input name Source code in naunet/reactions/reaction.py def create_species ( self , species_name : str ) -> Species : \"\"\" Create a Species instance if the name is not a pseudo element (e.g. CR, CRPHOT), else return None Args: species_name (str): name of species Returns: Species: Species instance of the input name \"\"\" if species_name and species_name not in Species . known_pseudoelements (): return Species ( species_name )","title":"create_species()"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.finalize","text":"Reset settings / class attributes if needed Source code in naunet/reactions/reaction.py @classmethod def finalize ( cls ) -> None : \"\"\" Reset settings / class attributes if needed \"\"\" pass","title":"finalize()"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.initialize","text":"Change settings / class attributes if needed Source code in naunet/reactions/reaction.py @classmethod def initialize ( cls ) -> None : \"\"\" Change settings / class attributes if needed \"\"\" pass","title":"initialize()"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.preprocessing","text":"Preprocess the input reaction string before initialize a reaction. Called in Network class to deal with input with special meanings. Parameters: Name Type Description Default line str input string of a reaction required Returns: Type Description str str: proceeded input string Source code in naunet/reactions/reaction.py @classmethod def preprocessing ( cls , line : str ) -> str : \"\"\" Preprocess the input reaction string before initialize a reaction. Called in Network class to deal with input with special meanings. Args: line (str): input string of a reaction Returns: str: proceeded input string \"\"\" return line","title":"preprocessing()"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.rate_func","text":"Abstract method should be implemented by child class. Return the reaction rate expression. Source code in naunet/reactions/reaction.py @abstractmethod def rate_func ( self ): \"\"\" Abstract method should be implemented by child class. Return the reaction rate expression. Raises: NotImplementedError \"\"\" raise NotImplementedError","title":"rate_func()"},{"location":"API/reaction/#naunet.reactions.reaction.Reaction.rpeq","text":"Compare two reactions by their reactants and products. Parameters: Name Type Description Default o object other reaction instance required Returns: Type Description bool bool: True if the reactants and products are the same in two reactions. Otherwise False Source code in naunet/reactions/reaction.py def rpeq ( self , o : object ) -> bool : \"\"\" Compare two reactions by their reactants and products. Args: o (object): other reaction instance Returns: bool: True if the reactants and products are the same in two reactions. Otherwise False \"\"\" return Counter ( self . reactants ) == Counter ( o . reactants ) and Counter ( self . products ) == Counter ( o . products )","title":"rpeq()"},{"location":"API/reaction/#naunet.reactions.reaction.ReactionType","text":"The definition of reaction types. Types are categorized by phases (gas, grain, surface) and then divided to sub-groups","title":"ReactionType"},{"location":"API/species/","text":"Species Module Species Class of chemical species This class generated species instances from the name of species. The name of species are like H2O, C2H6, etc. It parses the species name and find the substring matches with the recorded element/pseudo-element names. The list of element names can be set by the users (see methods below). Otherwise the default lists of element/pseudo-element are used. !!! notes 1. Pseudo-element here is used to say the special symbols exist in species but not elements in periodic table, isotopes, charges. E.g. o(ortho-), p(para-), CR (cosmic-ray) 2. For surface species (species stick on grains), another special symbol are defined in surface_prefix . Species starts with the special symbol are denoted as surface species. 3. Charges must be +/- symbol append in the end. E.g. He++, Si+++ Attributes: Name Type Description default_elements list The default element names used to parse default_pseudoelement list The default pseudo-element names surface_symbol str The symbol used to define surface species. alias : str property writable Alias of the species. Replace surface symbol by G and charges by M (-), I (+). Used in indexing species in codes. Can be customized by setter if needed. basename : str property readonly The species name without surface symbols and charges. binding_energy : float property readonly Binding energy of surface species. Return the binding energy if this species is at ice-phase. If the binding energy was not set before, it will be searched in the UMIST 2012 binding energy data. Raise error when no value is found. Exceptions: Type Description RuntimeError binding energy cannot be found charge : int property readonly Total charge of the species. Calculate the number of \"+\" and \"-\" in the end gasname : str property readonly Return the name of its gas-phase species if this species is at ice-phase. Else return the current name. is_surface : bool property readonly Check whether the species is sticking on surface (a surface species) mass : float property readonly The mass (amu) of the species, estimated by summing the mass of elements massnumber : float property readonly The mass number (neutron + proton) of the species photon_yield : float property readonly The photodesorption yield of the species (ice-phase only). Return default value (1.0e-3) if no value is found. The default value can be changed in naunet.chemistry.default_photon_yield add_known_elements ( elements ) classmethod Add names of elements to the list of known elements Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def add_known_elements ( cls , elements : list ) -> list : \"\"\" Add names of elements to the list of known elements Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) for ele in elements : if ele in cls . _known_elements : logging . warning ( \" {} exists in element list, skip!\" . format ( ele )) elif ele in cls . _known_pseudoelements : logging . warning ( \" {} exists in pseudo element list, move to element list!\" . format ( ele ) ) cls . _known_pseudoelements . remove ( ele ) cls . _known_elements . append ( ele ) else : cls . _known_elements . append ( ele ) cls . _check_elements () return cls . _known_elements add_known_pseudoelements ( pelements ) classmethod Add names of elements to the list of known pseudo elements Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def add_known_pseudoelements ( cls , pelements : list ) -> list : \"\"\" Add names of elements to the list of known pseudo elements Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) for ele in pelements : if ele in cls . _known_pseudoelements : logging . warning ( \" {} exists in pseudo element list, skip!\" . format ( ele )) elif ele in cls . _known_elements : logging . warning ( \" {} exists in element list, move to pseudo element list!\" . format ( ele ) ) cls . _known_elements . remove ( ele ) cls . _known_pseudoelements . append ( ele ) else : cls . _known_pseudoelements . append ( ele ) cls . _check_elements () return cls . _known_pseudoelements known_elements () classmethod Returns the current list of known elements Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def known_elements ( cls ) -> list : \"\"\" Returns the current list of known elements Returns: list: the current list of known elements \"\"\" return cls . _known_elements known_pseudoelements () classmethod Returns the current list of known pseudo elements Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def known_pseudoelements ( cls ) -> list : \"\"\" Returns the current list of known pseudo elements Returns: list: the current list of known pseudo elements \"\"\" return cls . _known_pseudoelements remove_known_elements ( elements ) classmethod Remove names of elements to the list of known elements Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def remove_known_elements ( cls , elements : list ) -> list : \"\"\" Remove names of elements to the list of known elements Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) for ele in elements : cls . _known_elements . remove ( ele ) cls . _check_elements () return cls . _known_elements remove_known_pseudoelements ( pelements ) classmethod Add names of elements to the list of known pseudo elements Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def remove_known_pseudoelements ( cls , pelements : list ) -> list : \"\"\" Add names of elements to the list of known pseudo elements Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) for ele in pelements : cls . _known_pseudoelements . remove ( ele ) cls . _check_elements () return cls . _known_pseudoelements reset () classmethod Reset class attributes in Species Reset known_elements, known_pseudoelements, and surface_prefix. Source code in naunet/species.py @classmethod def reset ( cls ) -> None : \"\"\"Reset class attributes in Species Reset known_elements, known_pseudoelements, and surface_prefix. \"\"\" cls . _known_elements = [] cls . _known_pseudoelements = [] cls . surface_prefix = \"#\" set_known_elements ( elements ) classmethod Set the list of known elements to new list Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description None list: the current list of known elements Source code in naunet/species.py @classmethod def set_known_elements ( cls , elements : list ) -> None : \"\"\" Set the list of known elements to new list Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) cls . _known_elements . clear () cls . _known_elements . extend ( elements ) cls . _check_elements () set_known_pseudoelements ( pelements ) classmethod Set the list of known pseudo elements to new list Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description None list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def set_known_pseudoelements ( cls , pelements : list ) -> None : \"\"\" Set the list of known pseudo elements to new list Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) cls . _known_pseudoelements . clear () cls . _known_pseudoelements . extend ( pelements ) cls . _check_elements () top_abundant_species ( species_list , abundances , element = None , rank =- 1 ) The function returns a tuple list sorted by the abundances of element. Parameters: Name Type Description Default species_list list list of Molecule() objects. required abundances list The abundances of the species in the species_list. required element string The target element. The order is sorted by the abundances weighted by the number of element in the species. Defaults to None. None rank int Return the species in the top number. Defaults to -1 (all sorted species). -1 Exceptions: Type Description RuntimeError The element could doesn't exist in the species_list and return an empty list. Returns: Type Description list Tuple of (Molecule, float) . Source code in naunet/species.py def top_abundant_species ( species_list , abundances , element = None , rank =- 1 ): \"\"\" The function returns a tuple list sorted by the abundances of element. Args: species_list (list): list of `Molecule()` objects. abundances (list): The abundances of the species in the species_list. element (string, optional): The target element. The order is sorted by the abundances weighted by the number of element in the species. Defaults to None. rank (int, optional): Return the species in the top number. Defaults to -1 (all sorted species). Raises: RuntimeError: The element could doesn't exist in the species_list and return an empty list. Returns: list: Tuple of `(Molecule, float)`. \"\"\" sorted_abund = None if element == None : sorted_abund = sorted ( zip ( species_list , abundances ), key = lambda x : x [ 1 ], reverse = True )[: rank ] else : filtered_abund = list ( filter ( lambda x : element in x [ 0 ] . element_count . keys (), zip ( species_list , abundances ), ) ) sorted_abund = sorted ( filtered_abund , key = lambda x : x [ 1 ] * x [ 0 ] . element_count [ element ], reverse = True , )[: rank ] if not sorted_abund : raise RuntimeError ( \"Undefined results. please check the element exists in the network.\" ) return sorted_abund","title":"species"},{"location":"API/species/#species-module","text":"","title":"Species Module"},{"location":"API/species/#naunet.species.Species","text":"Class of chemical species This class generated species instances from the name of species. The name of species are like H2O, C2H6, etc. It parses the species name and find the substring matches with the recorded element/pseudo-element names. The list of element names can be set by the users (see methods below). Otherwise the default lists of element/pseudo-element are used. !!! notes 1. Pseudo-element here is used to say the special symbols exist in species but not elements in periodic table, isotopes, charges. E.g. o(ortho-), p(para-), CR (cosmic-ray) 2. For surface species (species stick on grains), another special symbol are defined in surface_prefix . Species starts with the special symbol are denoted as surface species. 3. Charges must be +/- symbol append in the end. E.g. He++, Si+++ Attributes: Name Type Description default_elements list The default element names used to parse default_pseudoelement list The default pseudo-element names surface_symbol str The symbol used to define surface species.","title":"Species"},{"location":"API/species/#naunet.species.Species.alias","text":"Alias of the species. Replace surface symbol by G and charges by M (-), I (+). Used in indexing species in codes. Can be customized by setter if needed.","title":"alias"},{"location":"API/species/#naunet.species.Species.basename","text":"The species name without surface symbols and charges.","title":"basename"},{"location":"API/species/#naunet.species.Species.binding_energy","text":"Binding energy of surface species. Return the binding energy if this species is at ice-phase. If the binding energy was not set before, it will be searched in the UMIST 2012 binding energy data. Raise error when no value is found. Exceptions: Type Description RuntimeError binding energy cannot be found","title":"binding_energy"},{"location":"API/species/#naunet.species.Species.charge","text":"Total charge of the species. Calculate the number of \"+\" and \"-\" in the end","title":"charge"},{"location":"API/species/#naunet.species.Species.gasname","text":"Return the name of its gas-phase species if this species is at ice-phase. Else return the current name.","title":"gasname"},{"location":"API/species/#naunet.species.Species.is_surface","text":"Check whether the species is sticking on surface (a surface species)","title":"is_surface"},{"location":"API/species/#naunet.species.Species.mass","text":"The mass (amu) of the species, estimated by summing the mass of elements","title":"mass"},{"location":"API/species/#naunet.species.Species.massnumber","text":"The mass number (neutron + proton) of the species","title":"massnumber"},{"location":"API/species/#naunet.species.Species.photon_yield","text":"The photodesorption yield of the species (ice-phase only). Return default value (1.0e-3) if no value is found. The default value can be changed in naunet.chemistry.default_photon_yield","title":"photon_yield"},{"location":"API/species/#naunet.species.Species.add_known_elements","text":"Add names of elements to the list of known elements Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def add_known_elements ( cls , elements : list ) -> list : \"\"\" Add names of elements to the list of known elements Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) for ele in elements : if ele in cls . _known_elements : logging . warning ( \" {} exists in element list, skip!\" . format ( ele )) elif ele in cls . _known_pseudoelements : logging . warning ( \" {} exists in pseudo element list, move to element list!\" . format ( ele ) ) cls . _known_pseudoelements . remove ( ele ) cls . _known_elements . append ( ele ) else : cls . _known_elements . append ( ele ) cls . _check_elements () return cls . _known_elements","title":"add_known_elements()"},{"location":"API/species/#naunet.species.Species.add_known_pseudoelements","text":"Add names of elements to the list of known pseudo elements Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def add_known_pseudoelements ( cls , pelements : list ) -> list : \"\"\" Add names of elements to the list of known pseudo elements Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) for ele in pelements : if ele in cls . _known_pseudoelements : logging . warning ( \" {} exists in pseudo element list, skip!\" . format ( ele )) elif ele in cls . _known_elements : logging . warning ( \" {} exists in element list, move to pseudo element list!\" . format ( ele ) ) cls . _known_elements . remove ( ele ) cls . _known_pseudoelements . append ( ele ) else : cls . _known_pseudoelements . append ( ele ) cls . _check_elements () return cls . _known_pseudoelements","title":"add_known_pseudoelements()"},{"location":"API/species/#naunet.species.Species.known_elements","text":"Returns the current list of known elements Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def known_elements ( cls ) -> list : \"\"\" Returns the current list of known elements Returns: list: the current list of known elements \"\"\" return cls . _known_elements","title":"known_elements()"},{"location":"API/species/#naunet.species.Species.known_pseudoelements","text":"Returns the current list of known pseudo elements Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def known_pseudoelements ( cls ) -> list : \"\"\" Returns the current list of known pseudo elements Returns: list: the current list of known pseudo elements \"\"\" return cls . _known_pseudoelements","title":"known_pseudoelements()"},{"location":"API/species/#naunet.species.Species.remove_known_elements","text":"Remove names of elements to the list of known elements Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known elements Source code in naunet/species.py @classmethod def remove_known_elements ( cls , elements : list ) -> list : \"\"\" Remove names of elements to the list of known elements Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) for ele in elements : cls . _known_elements . remove ( ele ) cls . _check_elements () return cls . _known_elements","title":"remove_known_elements()"},{"location":"API/species/#naunet.species.Species.remove_known_pseudoelements","text":"Add names of elements to the list of known pseudo elements Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description list list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def remove_known_pseudoelements ( cls , pelements : list ) -> list : \"\"\" Add names of elements to the list of known pseudo elements Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) for ele in pelements : cls . _known_pseudoelements . remove ( ele ) cls . _check_elements () return cls . _known_pseudoelements","title":"remove_known_pseudoelements()"},{"location":"API/species/#naunet.species.Species.reset","text":"Reset class attributes in Species Reset known_elements, known_pseudoelements, and surface_prefix. Source code in naunet/species.py @classmethod def reset ( cls ) -> None : \"\"\"Reset class attributes in Species Reset known_elements, known_pseudoelements, and surface_prefix. \"\"\" cls . _known_elements = [] cls . _known_pseudoelements = [] cls . surface_prefix = \"#\"","title":"reset()"},{"location":"API/species/#naunet.species.Species.set_known_elements","text":"Set the list of known elements to new list Parameters: Name Type Description Default elements list names of elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description None list: the current list of known elements Source code in naunet/species.py @classmethod def set_known_elements ( cls , elements : list ) -> None : \"\"\" Set the list of known elements to new list Args: elements (list): names of elements Raises: TypeError: If argument is not a list Returns: list: the current list of known elements \"\"\" if not isinstance ( elements , list ): raise TypeError ( f \" { elements } is not a list\" ) cls . _known_elements . clear () cls . _known_elements . extend ( elements ) cls . _check_elements ()","title":"set_known_elements()"},{"location":"API/species/#naunet.species.Species.set_known_pseudoelements","text":"Set the list of known pseudo elements to new list Parameters: Name Type Description Default pelements list names of pseudo elements required Exceptions: Type Description TypeError If argument is not a list Returns: Type Description None list: the current list of known pseudo elements Source code in naunet/species.py @classmethod def set_known_pseudoelements ( cls , pelements : list ) -> None : \"\"\" Set the list of known pseudo elements to new list Args: pelements (list): names of pseudo elements Raises: TypeError: If argument is not a list Returns: list: the current list of known pseudo elements \"\"\" if not isinstance ( pelements , list ): raise TypeError ( f \" { pelements } is not a list\" ) cls . _known_pseudoelements . clear () cls . _known_pseudoelements . extend ( pelements ) cls . _check_elements ()","title":"set_known_pseudoelements()"},{"location":"API/species/#naunet.species.top_abundant_species","text":"The function returns a tuple list sorted by the abundances of element. Parameters: Name Type Description Default species_list list list of Molecule() objects. required abundances list The abundances of the species in the species_list. required element string The target element. The order is sorted by the abundances weighted by the number of element in the species. Defaults to None. None rank int Return the species in the top number. Defaults to -1 (all sorted species). -1 Exceptions: Type Description RuntimeError The element could doesn't exist in the species_list and return an empty list. Returns: Type Description list Tuple of (Molecule, float) . Source code in naunet/species.py def top_abundant_species ( species_list , abundances , element = None , rank =- 1 ): \"\"\" The function returns a tuple list sorted by the abundances of element. Args: species_list (list): list of `Molecule()` objects. abundances (list): The abundances of the species in the species_list. element (string, optional): The target element. The order is sorted by the abundances weighted by the number of element in the species. Defaults to None. rank (int, optional): Return the species in the top number. Defaults to -1 (all sorted species). Raises: RuntimeError: The element could doesn't exist in the species_list and return an empty list. Returns: list: Tuple of `(Molecule, float)`. \"\"\" sorted_abund = None if element == None : sorted_abund = sorted ( zip ( species_list , abundances ), key = lambda x : x [ 1 ], reverse = True )[: rank ] else : filtered_abund = list ( filter ( lambda x : element in x [ 0 ] . element_count . keys (), zip ( species_list , abundances ), ) ) sorted_abund = sorted ( filtered_abund , key = lambda x : x [ 1 ] * x [ 0 ] . element_count [ element ], reverse = True , )[: rank ] if not sorted_abund : raise RuntimeError ( \"Undefined results. please check the element exists in the network.\" ) return sorted_abund","title":"top_abundant_species()"}]}
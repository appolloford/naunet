{% if header %}
#include "{{ header_file }}"
{% else %}
#include <cvode/cvode.h>
#include <nvector/nvector_serial.h>
#include "naunet_constants.h"
#include "userdata.h"
{% endif %}

// Jacobian function vector routine.
{{ func }}{

    realtype *x  = N_VGetArrayPointer(u);
    realtype *{{ vector }}  = N_VGetArrayPointer(v);
    realtype *{{ lhs }} = N_VGetArrayPointer(Jv);
    realtype *fx = N_VGetArrayPointer(fu);
    UserData *u_data = (UserData*) user_data;
    realtype Tgas = u_data->Tgas;


    realtype Te = Tgas*8.617343e-5; //Tgas in eV (eV)
    realtype lnTe = log(Te); //ln of Te (#)
    realtype T32 = Tgas*0.0033333333333333335; //Tgas/(300 K) (#)
    realtype invT = 1.0/Tgas; //inverse of T (1/K)
    realtype invTe = 1.0/Te; //inverse of T (1/eV)
    realtype sqrTgas = sqrt(Tgas); //Tgas rootsquare (K**0.5)

    {% for declare in rate_declare -%}
        {{ declare }}
    {% endfor %}

    {% set wrap = "\n        " -%}
    {% set bclose = wrap + "}" -%}
    {% for assign in rate_assign -%}
        {{ assign | wordwrap(80) | replace("\n", wrap) | replace(bclose, '\n    }') }}
        {{ "" }}
    {% endfor %}

    {% for eq in eqns -%}
        {{ eq | wordwrap(80) | replace('\n', wrap) }}
    {% endfor %}

    for (int i=0; i<NSPECIES; i++) {
        fx[i] = 0.0;
    }

    return 0;

}
#ifndef __NAUNET_H__
#define __NAUNET_H__

#include <stdio.h>

#include "naunet_data.h"
#include "naunet_macros.h"

#ifdef PYMODULE
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>

namespace py = pybind11;
#endif

class Naunet {
   public:
    Naunet();
    ~Naunet();
    int Finalize();
    int Init(int nsystem = MAX_NSYSTEMS, double atol = 1e-20,
             double rtol = 1e-5, int mxsteps = 500);
    int PrintDebugInfo();
#ifdef IDX_ELEM_H
    /* Renormalize the species abundances accroding to `ab_ref_`(private).
       This conserves the element fractions but does not change the overall
       density */
    int Renorm(double *ab);
#endif
    int Reset(int nsystem = MAX_NSYSTEMS, double atol = 1e-20,
              double rtol = 1e-5, int mxsteps = 500);
#ifdef IDX_ELEM_H
    /* Set the reference abundance `ab_ref_`. `opt == 0` assumes that the input
       is element abundances. `opt == 1` assumes the input is species
       abundances. */
    int SetReferenceAbund(double *ref, int opt = 0);
#endif
    int Solve(double *abund, double dt, NaunetData *data);
#ifdef PYMODULE
    py::array_t<double> PyWrapSolve(py::array_t<double> arr, double dt,
                                    NaunetData *data);
#endif

   private:
    int n_system_;
    int mxsteps_;
    int step_;
    double atol_;
    double rtol_;
    FILE *errfp_;
    double ab_ref_[NELEMENTS];
};

#ifdef PYMODULE

PYBIND11_MODULE(PYMODNAME, m) {
    py::class_<Naunet>(m, "Naunet")
        .def(py::init())
        .def("Init", &Naunet::Init, py::arg("nsystem") = 1,
             py::arg("atol") = 1e-20, py::arg("rtol") = 1e-5,
             py::arg("mxsteps") = 500)
        .def("Finalize", &Naunet::Finalize)
        .def("Solve", &Naunet::PyWrapSolve);

    // clang-format off
    py::class_<NaunetData>(m, "NaunetData")
        .def(py::init())
        {% for v in network.varis.keys() -%}
            .def_readwrite("{{ v }}", &NaunetData::{{ v }})
        {% endfor -%}
        ;
    // clang-format on
}

#endif

#endif

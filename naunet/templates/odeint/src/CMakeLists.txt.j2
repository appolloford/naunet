set(_STATIC_LIB_SUFFIX
    "_static"
    CACHE INTERNAL "" FORCE
)
set(_SHARED_LIB_SUFFIX
    "_shared"
    CACHE INTERNAL "" FORCE
)


set(targetname
    {% if info.device != "gpu" -%}
    naunet_constants
    naunet_physics
    naunet_ode
    {% endif -%}
    naunet
)

{% if info.device == "gpu" -%}
set(cuda_targetname
    naunet_constants
    naunet_physics
    naunet_ode
)
{% endif %}

set(_libtypes "")
if(MAKE_STATIC)
    set(_libtypes "STATIC")
endif()

if(MAKE_SHARED)
    set(_libtypes "${_libtypes};SHARED")
endif()

foreach(_libtype ${_libtypes})

    # library suffix
    if(${_libtype} MATCHES "STATIC")
        set(_lib_suffix "${_STATIC_LIB_SUFFIX}")
    else()
        set(_lib_suffix "${_SHARED_LIB_SUFFIX}")
    endif()

    set(compiled_target "")
    {% if info.device == "gpu" -%}
    foreach(name ${cuda_targetname})
        set(lib_target ${name}${_lib_suffix})
        add_library(${lib_target} ${_libtype} name.cu)
        set_target_properties(${lib_target} PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
        target_include_directories(${lib_target} PRIVATE ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
        target_include_directories(${lib_target} PUBLIC ${CMAKE_SOURCE_DIR}/include)
        target_include_directories(${lib_target} PRIVATE ${Boost_INCLUDE_DIRS})
        target_link_libraries(${lib_target} ${compiled_target})
        set(compiled_target "${compiled_target};${lib_target}")
        set_target_properties(${lib_target} PROPERTIES OUTPUT_NAME ${name})
    endforeach()
    {% endif -%}

    foreach(name ${targetname})
        set(lib_target ${name}${_lib_suffix})
        add_library(${lib_target} ${_libtype} ${name}.cpp)
        target_include_directories(${lib_target} PUBLIC ${CMAKE_SOURCE_DIR}/include)
        target_include_directories(${lib_target} PRIVATE ${Boost_INCLUDE_DIRS})
        target_link_libraries(${lib_target} ${compiled_target})
        set(compiled_target "${compiled_target};${lib_target}")
        set_target_properties(${lib_target} PROPERTIES OUTPUT_NAME ${name})
    endforeach()

endforeach()

if(MAKE_SHARED)
    set(NAUNETLIB_SHARED
        naunet${_SHARED_LIB_SUFFIX}
        naunet_constants${_SHARED_LIB_SUFFIX}
        naunet_ode${_SHARED_LIB_SUFFIX}
        naunet_physics${_SHARED_LIB_SUFFIX}
        CACHE INTERNAL ""
    )
    install(TARGETS ${NAUNETLIB_SHARED}
        LIBRARY DESTINATION lib
    )
endif()

if(MAKE_STATIC)
    set(NAUNETLIB_STATIC
        naunet${_STATIC_LIB_SUFFIX}
        naunet_constants${_STATIC_LIB_SUFFIX}
        naunet_ode${_STATIC_LIB_SUFFIX}
        naunet_physics${_STATIC_LIB_SUFFIX}
        CACHE INTERNAL ""
    )
    install(TARGETS ${NAUNETLIB_STATIC}
        LIBRARY DESTINATION lib
    )
endif()

if(MAKE_PYTHON)

    include(FetchContent)
    FetchContent_Declare(
        pybind11_sources
        GIT_REPOSITORY https://github.com/pybind/pybind11.git
        GIT_TAG v2.6.2
    )
    FetchContent_GetProperties(pybind11_sources)
    if(NOT pybind11_sources_POPULATED)
        FetchContent_Populate(pybind11_sources)
        add_subdirectory(
            ${pybind11_sources_SOURCE_DIR}
            ${pybind11_sources_BINARY_DIR}
        )   
    endif()

    add_library(${PYMODNAME} MODULE naunet.cpp)
    target_compile_definitions(${PYMODNAME}
        PUBLIC
            -DPYMODULE -DPYMODNAME=${PYMODNAME}
    ) 
    target_link_libraries(${PYMODNAME} 
        PUBLIC
            pybind11::module
            ${NAUNETLIB_STATIC}
    )
    target_include_directories(${PYMODNAME} 
        PUBLIC 
            ${CMAKE_SOURCE_DIR}/include
        PRIVATE 
            ${Boost_INCLUDE_DIRS}
    )

    set_target_properties(${PYMODNAME}
        PROPERTIES
            PREFIX "${PYTHON_MODULE_PREFIX}"
            SUFFIX "${PYTHON_MODULE_EXTENSION}"
    )

    install(TARGETS ${PYMODNAME}
        LIBRARY DESTINATION python
    )

endif()

install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/
    DESTINATION include)

#include <boost/numeric/ublas/io.hpp>
#include <boost/numeric/ublas/lu.hpp>

#include "naunet.h"
#include "naunet_macros.h"
#include "naunet_ode.h"
#include "naunet_physics.h"
/* {% if "VB88Table" in physics.coshielding -%} */
#include "naunet_constants.h"
#include "naunet_utilities.h"
/* {% endif -%} */

using namespace boost::numeric::odeint;

Naunet::Naunet(){};

Naunet::~Naunet(){};

int Naunet::Finalize() {
    fclose(errfp_);
    return NAUNET_SUCCESS;
};

int Naunet::Init(int nsystem, double atol, double rtol, int mxsteps) {
    if (nsystem != 1) {
        printf("This solver doesn't support nsystem > 1!");
        return NAUNET_FAIL;
    }

    n_system_ = nsystem;
    mxsteps_  = mxsteps;
    atol_     = atol;
    rtol_     = rtol;
    errfp_    = fopen("naunet_error_record.txt", "a");

    /* {% if "VB88Table" in physics.coshielding -%} */

    // TODO: The result is not saved
    // double *x1  = vector(1, 6);
    // double *x2  = vector(1, 7);
    // double **y  = matrix(1, 6, 1, 7);
    // double **y2 = matrix(1, 6, 1, 7);

    // for (int i=1; i<=6; i++) x1[i] = COShieldingTableX[i-1];
    // for (int i=1; i<=7; i++) x2[i] = COShieldingTableY[i-1];

    // for (int i=1; i<=6; i++) {
    //     for (int j=1; j<=7; j++) {
    //         y[i][j] = COShieldingTable[i-1][j-1];
    //     }
    // }

    // splie2(x1, x2, y, 6, 7, y2);

    // free_vector(x1, 1, 6);
    // free_vector(x2, 1, 7);
    // free_matrix(y, 1, 6, 1, 7);
    // free_matrix(y2, 1, 6, 1, 7);

    // splie2(COShieldingTableX, COShieldingTableY, COShieldingTable, 6, 7,
    // COShieldingTableD2);

    /* {% endif -%} */

    return NAUNET_SUCCESS;
};

int Naunet::PrintDebugInfo() {
    printf("\nFinal Statistics:\n");
    printf("nst = %-6ld\n", step_);

    return NAUNET_SUCCESS;
};

#ifdef IDX_ELEM_H
int Naunet::Renorm(double *ab) {
    namespace ublas = boost::numeric::ublas;

    vector_type rptr(NELEMENTS);
    matrix_type A(NELEMENTS, NELEMENTS);
    for (int i = 0; i < NELEMENTS; i++) {
        rptr[i] = ab_ref_[i];
    }
    double Hnuclei = GetHNuclei(ab);

    // clang-format off
    {% for term in ode.renormmat -%}
    {{ term | stmwrap(80, 8) }};
    {% endfor %}

    // clang-format on
    ublas::permutation_matrix<size_t>
        pm(A.size1());
    lu_factorize(A, pm);
    lu_substitute(A, pm, rptr);

    // clang-format off
    {% for factor in ode.renorm -%}
    {{ factor }};
    {% endfor %}

    // clang-format on
    return NAUNET_SUCCESS;
};
#endif

int Naunet::Reset(int nsystem, double atol, double rtol, int mxsteps) {
    if (nsystem != 1) {
        printf("This solver doesn't support nsystem > 1!");
        return NAUNET_FAIL;
    }

    n_system_ = nsystem;
    mxsteps_  = mxsteps;
    atol_     = atol;
    rtol_     = rtol;

    return NAUNET_SUCCESS;
};

#ifdef IDX_ELEM_H
int Naunet::SetReferenceAbund(double *ref, int opt) {
    if (opt == 0) {
        for (int i = 0; i < NELEMENTS; i++) {
            ab_ref_[i] = ref[i] / ref[IDX_ELEM_H];
        }
    } else if (opt == 1) {
        double Hnuclei = GetHNuclei(ref);
        for (int i = 0; i < NELEMENTS; i++) {
            ab_ref_[i] = GetElementAbund(ref, i) / Hnuclei;
        }
    }

    return NAUNET_SUCCESS;
};
#endif

int Naunet::Solve(double *abund, double dt, NaunetData *data) {
    int flag = NAUNET_SUCCESS;

    vector_type y(NEQUATIONS);
    for (int i = 0; i < NEQUATIONS; i++) {
        y[i] = abund[i];
    }

    Observer observer(mxsteps_);

    // TODO: test the two methods from odeint stiff system example
    // size_t num_of_steps = integrate_const(
    //     make_dense_output<rosenbrock4<double>>(atol_, rtol_),
    //     make_pair(fex(data), jac(data)), y, 0.0, dt, dt
    // );

    // size_t num_of_steps = integrate_const(
    //     make_dense_output<runge_kutta_dopri5<vector_type>>(atol_, rtol_),
    //     fex(data), y, 0.0, dt, dt
    // );

    step_ = 0;
    try {
        step_ = integrate_adaptive(
            make_controlled<rosenbrock4<double>>(atol_, rtol_),
            std::make_pair(Fex(data), Jac(data)), y, 0.0, dt, dt, observer);
    } catch (const std::runtime_error &e) {
        fprintf(errfp_, "%s\n", e.what());

        flag = NAUNET_FAIL;
    }

    for (int i = 0; i < NEQUATIONS; i++) {
        abund[i] = y[i];
    }

    return flag;
};

#ifdef PYMODULE
py::array_t<double> Naunet::PyWrapSolve(py::array_t<double> arr, double dt,
                                        NaunetData *data) {
    py::buffer_info info = arr.request();
    double *abund        = static_cast<double *>(info.ptr);

    Solve(abund, dt, data);

    return py::array_t<double>(info.shape, abund);
}
#endif

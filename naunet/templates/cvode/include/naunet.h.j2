#ifndef __NAUNET_H__
#define __NAUNET_H__

#include <sundials/sundials_types.h>    // defs. of realtype, sunindextype
#include <sundials/sundials_math.h>     // contains the macros ABS, SUNSQR, EXP
#include <sundials/sundials_linearsolver.h>
{% if info.method == "cusparse" -%}
#include <sunlinsol/sunlinsol_cusolversp_batchqr.h>
{% endif -%}

#include "naunet_data.h"

#ifdef PYMODULE
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

namespace py = pybind11;
#endif

class Naunet
{

private:
    // NaunetData *m_data;
    N_Vector m_y;
    SUNMatrix m_a;

    realtype m_atol;
    realtype m_rtol;
    void *m_cvode_mem;
    SUNLinearSolver m_ls;

    {% if info.method == "cusparse" -%}
    cusparseHandle_t m_cusp_handle;
    cusolverSpHandle_t m_cusol_handle;
    {% endif %}

public:
    Naunet();
    ~Naunet();
    int initSolver();
    {% if info.method == "cusparse" -%}
    int resetSolver(int nsystem);
    {% endif -%}
    int solve(realtype *ab, realtype dt, NaunetData *data);
#ifdef PYMODULE
    py::array_t<realtype> wrapper_solve(py::array_t<realtype> arr, realtype dt, NaunetData *data);
#endif
};

#ifdef PYMODULE

PYBIND11_MODULE(PYMODNAME, m) {
    py::class_<Naunet>(m, "Naunet")
        .def(py::init())
        .def("initSolver", &Naunet::initSolver)
#ifdef USE_CUDA
        .def("resetSolver", &Naunet::resetSolver)
#endif
        .def("solve", &Naunet::wrapper_solve);

    py::class_<NaunetData>(m, "NaunetData")
        .def(py::init())
        {% for v in variables.varis -%}
            .def_readwrite("{{ v }}", &NaunetData::{{ v }})
        {% endfor -%}
        ;
}

#endif

#endif

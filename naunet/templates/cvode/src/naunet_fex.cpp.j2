#include <math.h>
/* {% if general.method == "dense" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_dense.h>  // access to dense SUNMatrix
/* {% elif general.method == "sparse" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_sparse.h>  // access to sparse SUNMatrix
/* {% elif general.method == "cusparse" -%} */
#include <nvector/nvector_cuda.h>
#include <sunmatrix/sunmatrix_cusparse.h>
/* {% endif -%} */
#include "naunet_constants.h"
#include "naunet_macros.h"
#include "naunet_ode.h"
#include "naunet_physics.h"

#define IJth(A, i, j) SM_ELEMENT_D(A, i, j)
#define NVEC_CUDA_CONTENT(x) ((N_VectorContent_Cuda)(x->content))
#define NVEC_CUDA_STREAM(x) (NVEC_CUDA_CONTENT(x)->stream_exec_policy->stream())
#define NVEC_CUDA_BLOCKSIZE(x) \
    (NVEC_CUDA_CONTENT(x)->stream_exec_policy->blockSize())
#define NVEC_CUDA_GRIDSIZE(x, n) \
    (NVEC_CUDA_CONTENT(x)->stream_exec_policy->gridSize(n))

/* {% if general.method == "cusparse" -%} */
__global__ void FexKernel(realtype *y, realtype *ydot, NaunetData *d_udata,
                          int nsystem) {
    int tidx = blockIdx.x * blockDim.x + threadIdx.x;
    int gs   = blockDim.x * gridDim.x;

    for (int cur = tidx; cur < nsystem; cur += gs) {
        int yistart            = cur * NEQUATIONS;
        realtype *y_cur        = y + yistart;
        NaunetData *udata      = &d_udata[cur];

        // clang-format off
        {% set components = network.reactions + network.grains + network.heating + network.cooling -%}
        {% for key, _ in components | collect_variable_items("params") -%}
            realtype {{ key }} = udata->{{ key }};
        {% endfor %}

        {% set components = network.reactions + network.grains + network.heating + network.cooling -%}
        {% for key, value in components | collect_variable_items("deriveds") -%}
            realtype {{ key }} = {{ value }};
        {% endfor %}
        
#if (NHEATPROCS || NCOOLPROCS)
        if (mu < 0) mu = GetMu(y_cur);
        if (gamma < 0) gamma = GetGamma(y_cur);
#endif

        // clang-format on

        realtype k[NREACTIONS] = {0.0};
        EvalRates(k, y_cur, udata);

#if NHEATPROCS
        realtype kh[NHEATPROCS] = {0.0};
        EvalHeatingRates(kh, y_cur, udata);
#endif

#if NCOOLPROCS
        realtype kc[NCOOLPROCS] = {0.0};
        EvalCoolingRates(kc, y_cur, udata);
#endif

        // clang-format off
        {% for eq in ode.fex -%}
            {{ eq | replace("ydot[IDX", "ydot[yistart + IDX") | replace("y[IDX", "y_cur[IDX") | stmwrap(80, 12) }}
        {% endfor %}

        {% for m in ode.odemodifier -%}
            {{ m | replace("ydot[IDX", "ydot[yistart + IDX") | replace("y[IDX", "y_cur[IDX") }};
        {% endfor %}
        // clang-format on
    }
}

/* {% endif -%} */

int Fex(realtype t, N_Vector u, N_Vector udot, void *user_data) {
    /* {% if general.method == "dense" or general.method == "sparse" -%} */
    realtype *y            = N_VGetArrayPointer(u);
    realtype *ydot         = N_VGetArrayPointer(udot);
    NaunetData *u_data     = (NaunetData *)user_data;
    // clang-format off
    {% set components = network.reactions + network.grains + network.heating + network.cooling -%}
    {% for key, _ in components | collect_variable_items("params") -%}
        realtype {{ key }} = u_data->{{ key }};
    {% endfor %}

    {% set components = network.reactions + network.grains + network.heating + network.cooling -%}
    {% for key, value in components | collect_variable_items("deriveds") -%}
        realtype {{ key }} = {{ value }};
    {% endfor %}

#if (NHEATPROCS || NCOOLPROCS)
    if (mu < 0) mu = GetMu(y);
    if (gamma < 0) gamma = GetGamma(y);
#endif

    // clang-format on

    realtype k[NREACTIONS] = {0.0};
    EvalRates(k, y, u_data);

#if NHEATPROCS
    realtype kh[NHEATPROCS] = {0.0};
    EvalHeatingRates(kh, y, u_data);
#endif

#if NCOOLPROCS
    realtype kc[NCOOLPROCS] = {0.0};
    EvalCoolingRates(kc, y, u_data);
#endif

    // clang-format off
    {% for eq in ode.fex -%}
        {{ eq | stmwrap(80, 8) }}
    {% endfor %}

    {% for m in ode.odemodifier -%}
        {{ m }};
    {% endfor %}

#if ((NHEATPROCS || NCOOLPROCS) && NAUNET_DEBUG)
    printf("Total heating/cooling rate: %13.7e\n", ydot[IDX_TGAS]);
#endif

    // clang-format on

    /* {% elif general.method == "cusparse" -%} */

    cudaStream_t stream = *(NVEC_CUDA_STREAM(u));

    realtype *y         = N_VGetDeviceArrayPointer_Cuda(u);
    realtype *ydot      = N_VGetDeviceArrayPointer_Cuda(udot);
    NaunetData *h_udata = (NaunetData *)user_data;
    NaunetData *d_udata;

    // check the size of system (number of cells/ a batch)
    sunindextype lrw, liw;
    N_VSpace_Cuda(u, &lrw, &liw);
    int nsystem = lrw / NEQUATIONS;

    // copy the user data for each system/cell
    cudaMalloc((void **)&d_udata, sizeof(NaunetData) * nsystem);
    cudaMemcpyAsync(d_udata, h_udata, sizeof(NaunetData) * nsystem,
                    cudaMemcpyHostToDevice, stream);
    // cudaDeviceSynchronize();

    // unsigned block_size = min(BLOCKSIZE, nsystem);
    // unsigned grid_size =
    //     max(1, min(MAX_NSYSTEMS_PER_STREAM / BLOCKSIZE, nsystem /
    //     BLOCKSIZE));
    size_t block_size = NVEC_CUDA_BLOCKSIZE(u);
    size_t grid_size  = NVEC_CUDA_GRIDSIZE(u, nsystem);
    FexKernel<<<grid_size, block_size, 0, stream>>>(y, ydot, d_udata, nsystem);

    // cudaDeviceSynchronize();
    cudaError_t cuerr = cudaGetLastError();
    if (cuerr != cudaSuccess) {
        fprintf(stderr, ">>> ERROR in fex: cudaGetLastError returned %s\n",
                cudaGetErrorName(cuerr));
        return -1;
    }
    cudaFree(d_udata);

    /* {% endif -%} */

    return NAUNET_SUCCESS;
}

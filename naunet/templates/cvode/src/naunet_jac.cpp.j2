#include <math.h>
/* {% if info.method == "dense" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_dense.h>  // access to dense SUNMatrix
/* {% elif info.method == "sparse" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_sparse.h>  // access to sparse SUNMatrix
/* {% elif info.method == "cusparse" -%} */
#include <nvector/nvector_cuda.h>
#include <sunmatrix/sunmatrix_cusparse.h>
/* {% endif -%} */
/* {% if ode.header %} */
#include "{{ ode.header }}"
/* {% else %} */
#include <sundials/sundials_types.h>  // defs. of realtype, sunindextype

#include "naunet_data.h"
/* {% endif %} */
#include "naunet_constants.h"
#include "naunet_macros.h"
#include "naunet_physics.h"

#define IJth(A, i, j)            SM_ELEMENT_D(A, i, j)
#define NVEC_CUDA_CONTENT(x)     ((N_VectorContent_Cuda)(x->content))
#define NVEC_CUDA_STREAM(x)      (NVEC_CUDA_CONTENT(x)->stream_exec_policy->stream())
#define NVEC_CUDA_BLOCKSIZE(x)   (NVEC_CUDA_CONTENT(x)->stream_exec_policy->blockSize())
#define NVEC_CUDA_GRIDSIZE(x, n) (NVEC_CUDA_CONTENT(x)->stream_exec_policy->gridSize(n))

/* {% if info.method == "cusparse" -%} */
int InitJac(SUNMatrix jmatrix) {
    // Zero out the Jacobian
    SUNMatZero(jmatrix);

    // clang-format off
    // number of non-zero elements in each row
    int rowptrs[NEQUATIONS + 1] = { 
        {{ ode.spjacrptrarr | stmwrap(80, 8) }}
    };

    // the column index of non-zero elements
    int colvals[NNZ] = {
        {{ ode.spjaccvalarr | stmwrap(80, 8) }}
    };

    // clang-format on

    // copy rowptrs, colvals to the device
    SUNMatrix_cuSparse_CopyToDevice(jmatrix, NULL, rowptrs, colvals);
    cudaDeviceSynchronize();

    return NAUNET_SUCCESS;
}

__global__ void JacKernel(realtype *y, realtype *data, NaunetData *d_udata,
                          int nsystem) {
    int tidx = blockIdx.x * blockDim.x + threadIdx.x;
    int gs   = blockDim.x * gridDim.x;

    for (int cur = tidx; cur < nsystem; cur += gs) {
        int yistart            = cur * NEQUATIONS;
        int jistart            = cur * NNZ;
        realtype *y_cur        = y + yistart;
        realtype k[NREACTIONS] = {0.0};
        NaunetData *udata      = &d_udata[cur];

        // clang-format off
        {% for v in variables.tvaris -%}
            realtype {{ v }} = udata->{{ v }};
        {% endfor %}
        
        {% if variables.tvaris -%}
        if (mu < 0) mu = GetMu(y_cur);
        if (gamma < 0) gamma = GetGamma(y_cur);
        {% endif -%}

        // clang-format on

        EvalRates(k, y_cur, udata);

#if NHEATPROCS
        realtype kh[NHEATPROCS] = {0.0};
        EvalHeatingRates(kh, y_cur, udata);
#endif 

#if NCOOLPROCS
        realtype kc[NCOOLPROCS] = {0.0};
        EvalCoolingRates(kc, y_cur, udata);
#endif

        // clang-format off
        {% for data in ode.spjacdata -%}
            {{ data | replace("data[", "data[jistart + ") | replace("y[IDX", "y_cur[IDX") | stmwrap(80, 12) }}
        {% endfor %}
        // clang-format on
    }
}
/* {% endif -%} */

int Jac(realtype t, N_Vector u, N_Vector fu, SUNMatrix jmatrix, void *user_data,
        N_Vector tmp1, N_Vector tmp2, N_Vector tmp3) {
    /* {% if info.method == "dense" -%} */
    realtype *y            = N_VGetArrayPointer(u);
    NaunetData *u_data     = (NaunetData *)user_data;
    // clang-format off
    {% for v in variables.varis -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}

    {% for v in variables.tvaris -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}
    
    {% if variables.tvaris -%}
    if (mu < 0) mu = GetMu(y);
    if (gamma < 0) gamma = GetGamma(y);
    {% endif -%}

    // clang-format on

    realtype k[NREACTIONS] = {0.0};
    EvalRates(k, y, u_data);

#if NHEATPROCS
    realtype kh[NHEATPROCS] = {0.0};
    EvalHeatingRates(kh, y, u_data);
#endif 

#if NCOOLPROCS
    realtype kc[NCOOLPROCS] = {0.0};
    EvalCoolingRates(kc, y, u_data);
#endif

    SUNMatZero(jmatrix);

    // clang-format off
    {% for eq in ode.jac -%}
        {{ eq | stmwrap(80, 8) }}
    {% endfor %}  // clang-format on

    /* {% elif info.method == "sparse" -%} */
    realtype *y            = N_VGetArrayPointer(u);
    sunindextype *rowptrs  = SUNSparseMatrix_IndexPointers(jmatrix);
    sunindextype *colvals  = SUNSparseMatrix_IndexValues(jmatrix);
    realtype *data         = SUNSparseMatrix_Data(jmatrix);
    NaunetData *u_data     = (NaunetData *)user_data;

    // clang-format off
    {% for v in variables.tvaris -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}
    
    {% if variables.tvaris -%}
    if (mu < 0) mu = GetMu(y);
    if (gamma < 0) gamma = GetGamma(y);
    {% endif -%}

    // clang-format on

    realtype k[NREACTIONS] = {0.0};
    EvalRates(k, y, u_data);

#if NHEATPROCS
    realtype kh[NHEATPROCS] = {0.0};
    EvalHeatingRates(kh, y, u_data);
#endif 

#if NCOOLPROCS
    realtype kc[NCOOLPROCS] = {0.0};
    EvalCoolingRates(kc, y, u_data);
#endif

    // clang-format off
    // number of non-zero elements in each row
    {% for rptr in ode.spjacrptr -%}
        {{ rptr }}
    {% endfor %}

    // the column index of non-zero elements
    {% for cval in ode.spjaccval -%}
        {{ cval }}
    {% endfor %}

    // value of each non-zero element
    {% for data in ode.spjacdata -%}
        {{ data | stmwrap(80, 8) }}
    {% endfor %}

    // clang-format on

    /* {% elif info.method == "cusparse" -%} */

    cudaStream_t stream = *(NVEC_CUDA_STREAM(u));

    realtype *y         = N_VGetDeviceArrayPointer_Cuda(u);
    realtype *data      = SUNMatrix_cuSparse_Data(jmatrix);
    NaunetData *h_udata = (NaunetData *)user_data;
    NaunetData *d_udata;

    int nsystem = SUNMatrix_cuSparse_NumBlocks(jmatrix);

    cudaMalloc((void **)&d_udata, sizeof(NaunetData) * nsystem);
    cudaMemcpyAsync(d_udata, h_udata, sizeof(NaunetData) * nsystem,
               cudaMemcpyHostToDevice, stream);
    // cudaDeviceSynchronize();

    // unsigned block_size = min(BLOCKSIZE, nsystem);
    // unsigned grid_size =
    //     max(1, min(MAX_NSYSTEMS_PER_STREAM / BLOCKSIZE, nsystem / BLOCKSIZE));
    size_t block_size = NVEC_CUDA_BLOCKSIZE(u);
    size_t grid_size  = NVEC_CUDA_GRIDSIZE(u, nsystem);
    JacKernel<<<grid_size, block_size, 0, stream>>>(y, data, d_udata, nsystem);

    // cudaDeviceSynchronize();
    cudaError_t cuerr = cudaGetLastError();
    if (cuerr != cudaSuccess) {
        fprintf(stderr, ">>> ERROR in jac: cudaGetLastError returned %s\n",
                cudaGetErrorName(cuerr));
        return -1;
    }
    cudaFree(d_udata);

    /* {% endif -%} */

    return NAUNET_SUCCESS;
}

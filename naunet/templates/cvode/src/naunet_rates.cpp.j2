#include <math.h>
/* {% if general.method == "dense" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_dense.h>  // access to dense SUNMatrix
/* {% elif general.method == "sparse" -%} */
#include <nvector/nvector_serial.h>
#include <sunmatrix/sunmatrix_sparse.h>  // access to sparse SUNMatrix
/* {% elif general.method == "cusparse" -%} */
#include <nvector/nvector_cuda.h>
#include <sunmatrix/sunmatrix_cusparse.h>
/* {% endif -%} */
#include "naunet_constants.h"
#include "naunet_macros.h"
#include "naunet_ode.h"
#include "naunet_physics.h"

#define IJth(A, i, j) SM_ELEMENT_D(A, i, j)

// clang-format off
{% if general.device == "gpu" -%} __device__ {% endif -%}
int EvalRates(realtype *k, realtype *y, NaunetData *u_data) {

    {% for v in network.varis.keys() -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}

    {% for v in network.locvars -%}
        {{ v }};
    {% endfor %}

    // clang-format on

    // reaaction rate (k) of each reaction
    // clang-format off
    {% for assign in ode.rateeqns -%}
        {{ assign | stmwrap(80, 8) }}
        {{ "" }}
    {% endfor %}

    {% for m in ode.ratemodifier -%}
        {{ m }};
    {% endfor %}
    // clang-format on

    return NAUNET_SUCCESS;
}

// clang-format off
{% if general.device == "gpu" -%} __device__ {% endif -%}
int EvalHeatingRates(realtype *kh, realtype *y, NaunetData *u_data) {

    {% for v in network.varis.keys() -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}

    {% for v in network.locvars -%}
        {{ v }};
    {% endfor %}

    // clang-format on

    // reaaction rate (k) of each reaction
    // clang-format off
    {% for assign in ode.hrateeqns -%}
        {{ assign | stmwrap(80, 8) }}
        {{ "" }}
    {% endfor %}

    // clang-format on

    return NAUNET_SUCCESS;
}

// clang-format off
{% if general.device == "gpu" -%} __device__ {% endif -%}
int EvalCoolingRates(realtype *kc, realtype *y, NaunetData *u_data) {

    {% for v in network.varis.keys() -%}
        realtype {{ v }} = u_data->{{ v }};
    {% endfor %}

    {% for v in network.locvars -%}
        {{ v }};
    {% endfor %}

    // clang-format on

    // reaaction rate (k) of each reaction
    // clang-format off
    {% for assign in ode.crateeqns -%}
        {{ assign | stmwrap(80, 8) }}
        {{ "" }}
    {% endfor %}

    // clang-format on

    return NAUNET_SUCCESS;
}

import os
import sys
sys.path.append(os.getenv('PYNAUNET_MODEL_PATH'))

import numpy as np
from pathlib import Path
from tomlkit.toml_file import TOMLFile

from pynaunet_model import Naunet, NaunetData
from pynaunet_model.constants import NSPEC, HAS_THERMAL
from pynaunet_model.constant_indexes import *

naunet_solver = Naunet()
naunet_data = NaunetData()

spy = 86400.0 * 365.0

{% block parameters %}
nH = 2e4
Tgas = 15.0

naunet_data.nH = nH
naunet_data.Tgas = Tgas
{% endblock parameters %}

naunet_solver.Init()
if @USE_CUDA@:
    naunet_solver.Reset(1)

{% block initial_abundance %}
y = np.ones(NSPEC + HAS_THERMAL) * 1e-40
# Set your initial abundance here
# e.g. y[IDX_H2I] = 0.5 * nH
raise RuntimeError("Abundance has not been assigned")
{% endblock initial_abundance %}

{% block timesteps %}
times = np.logspace(2, 7, 51)
times = np.append(0.0, times)
timesteps = times[1:] - times[:-1]
{% endblock timesteps %}

with open("evolution_pymodule.dat", "w") as evoldat:

    curtime = 0.0
    fmty = [f"{yi:13.7e}" for yi in y]
    evoldat.write(" ".join([f"{curtime:13.7e}", *fmty]))
    evoldat.write("\n")

    for ti, dtyr in enumerate(timesteps):
        dt = dtyr * spy
        y = naunet_solver.Solve(y, dt, naunet_data)
        {% block temperature%}
        {% endblock temperature%}

        curtime += dtyr
        fmty = [f"{yi:13.7e}" for yi in y]
        evoldat.write(" ".join([f"{curtime:13.7e}", *fmty]))
        evoldat.write("\n")

naunet_solver.Finalize();

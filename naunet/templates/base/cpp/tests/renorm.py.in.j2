import os
import sys
sys.path.append(os.getenv('PYNAUNET_MODEL_PATH'))

import numpy as np
from pathlib import Path

from naunet.species import Species
from pynaunet_model import Naunet, NaunetData
from pynaunet_model.constants import NELEM, NSPEC, ALL_ELEMENTS, ALL_SPECIES
from pynaunet_model.constant_indexes import *

def get_element_abund(species, abundance, target):
    speclist = [Species(s) for s in species]
    abund = np.sum([ab * s.element_count.get(target, 0) for s, ab in zip(speclist, abundance)])
    return abund

naunet_solver = Naunet()

{% block parameters %}
nH = 2e4
{% endblock parameters %}

{% block reference_abundance %}
y = np.ones(NSPEC + HAS_THERMAL) * 1e-40
# Set your initial abundance here
# e.g. y[IDX_H2I] = 0.5 * nH
raise RuntimeError("Abundance has not been assigned")
{% endblock reference_abundance %}

ref = np.array([get_element_abund(ALL_SPECIES, y, elem) for elem in ALL_ELEMENTS])
ref /= get_element_abund(ALL_SPECIES, y, "H")
print(f"Reference: {ref}")

naunet_solver.SetReferenceAbund(ref)
naunet_solver.SetReferenceAbund(y, 1)

{% block updated_abundance %}
y = np.ones(NSPEC + HAS_THERMAL) * 1e-40
raise RuntimeError("Abundance has not been assigned")
{% endblock updated_abundance %}

upd = np.array([get_element_abund(ALL_SPECIES, y, elem) for elem in ALL_ELEMENTS])
upd /= get_element_abund(ALL_SPECIES, y, "H")
print(f"Updated: {upd}")

naunet_solver.Renorm(y)

res = np.array([get_element_abund(ALL_SPECIES, y, elem) for elem in ALL_ELEMENTS])
res /= get_element_abund(ALL_SPECIES, y, "H")
print(f"Updated: {res}")

if any((res - ref) > 1e-3):
    raise RuntimeError("Renorm test failed")

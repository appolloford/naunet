#include <stdio.h>

#include <stdexcept>
#include <vector>

#include "naunet.h"
#include "naunet_data.h"
#include "naunet_macros.h"
#include "naunet_ode.h"
#include "naunet_physics.h"
#include "naunet_timer.h"

int main() {
    // {%- block parameters %}
    double nH = 2e4;
    // {%- endblock parameters %}

    Naunet naunet;

    // {%- block reference_abundance %}
    double y[NEQUATIONS] = {0.0};
    for (int i = 0; i < NEQUATIONS; i++) {
        y[i] = 1.e-40;
    }
    // Set your initial abundance here
    throw std::runtime_error("Abundance has not been assigned");
    // {%- endblock reference_abundance %}

    printf("The reference element abundance.\n");
    double elem[NELEMENTS] = {0.0};
    for (int i = 0; i < NELEMENTS; i++) {
        double elemab  = GetElementAbund(y, i);
        double Hnuclei = GetHNuclei(y);
        elem[i]        = elemab / Hnuclei;
        printf("    element[%d] / Hnuclei = %13.7e\n", i, elemab / Hnuclei);
    }

    if (naunet.SetReferenceAbund(y, 1) == NAUNET_FAIL) {
        printf("Fail to set reference abundance.\n");
        return 1;
    }

    // {%- block updated_abundance %}
    for (int i = 0; i < NEQUATIONS; i++) {
        y[i] = 1.e-40;
    }
    throw std::runtime_error("Abundance has not been updated");
    // {%- endblock updated_abundance %}

    printf("The updated abundance.\n");
    for (int i = 0; i < NELEMENTS; i++) {
        double elemab  = GetElementAbund(y, i);
        double Hnuclei = GetHNuclei(y);
        printf("    element[%d] / Hnuclei = %13.7e\n", i, elemab / Hnuclei);
    }

    int flag = naunet.Renorm(y);

    printf("The renormalized abundance.\n");
    for (int i = 0; i < NELEMENTS; i++) {
        double elemab  = GetElementAbund(y, i);
        double Hnuclei = GetHNuclei(y);
        printf("    element[%d] / Hnuclei = %13.7e\n", i, elemab / Hnuclei);
        if (abs(elemab / Hnuclei - elem[i]) > 1e-3) {
            return 1;
        }
    }

    return 0;
}

/***********************************************************************
/
/  GRID CLASS (WRAP THE NAUNET CHEMISTRY SOLVER)
/
/  written by: Chia-Jung Hsu
/  date:       2021
/  modified1:
/
/  PURPOSE: Solve chemistry with naunet.
/
/  RETURNS:
/    SUCCESS or FAIL
/
************************************************************************/
// clang-format off
#include "preincludes.h"
#ifdef USE_NAUNET
#include "naunet_enzo.h"
#endif
#include "performance.h"
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"
#include "CosmologyParameters.h"
#include "phys_constants.h"

// function prototypes

int CosmologyComputeExpansionFactor(FLOAT time, FLOAT *a, FLOAT *dadt);
int GetUnits(float *DensityUnits, float *LengthUnits,
             float *TemperatureUnits, float *TimeUnits,
             float *VelocityUnits, FLOAT Time);
int FindField(int field, int farray[], int numfields);

int grid::NaunetWrapper()
{

#ifdef USE_NAUNET

  if (use_naunet == FALSE)
    return SUCCESS;

  if (ProcessorNumber != MyProcessorNumber)
    return SUCCESS;

  if (MultiSpecies != NAUNET_SPECIES) {
    printf("NaunetWrapper Warning: MultiSpecies = %d isn't valid for naunet. \
            Skip solving chemistry.\n", MultiSpecies);
    return SUCCESS;
  }

  LCAPERF_START("grid_NaunetWrapper");

  int {{ declare | stmwrap(80, 6) }};

  int DensNum, GENum, Vel1Num, Vel2Num, Vel3Num, TENum;

  double dt_chem = dtFixed;
  
  // Compute the size of the fields.
 
  int i, j, k, igrid;
  int size = 1;
  for (int dim = 0; dim < GridRank; dim++)
    size *= GridDimension[dim];

  int activesize = 1;
  for (int dim = 0; dim < GridRank; dim++)
    activesize *= (GridDimension[dim] - 2*NumberOfGhostZones);

  Eint32 *g_grid_dimension, *g_grid_start, *g_grid_end;
  g_grid_dimension = new Eint32[GridRank];
  g_grid_start = new Eint32[GridRank];
  g_grid_end = new Eint32[GridRank];
  for (i = 0; i < GridRank; i++) {
    g_grid_dimension[i] = (Eint32) GridDimension[i];
    g_grid_start[i] = (Eint32) GridStartIndex[i];
    g_grid_end[i] = (Eint32) GridEndIndex[i];
  }
 
  // Find fields: density, total energy, velocity1-3.
 
  if (this->IdentifyPhysicalQuantities(DensNum, GENum, Vel1Num, Vel2Num,
                                       Vel3Num, TENum) == FAIL) {
    ENZO_FAIL("Error in IdentifyPhysicalQuantities.\n");
  }

  // Find Multi-species fields.

  {{ initial | stmwrap(80, 4) }};
 
  if (MultiSpecies == NAUNET_SPECIES)
    if (IdentifyNaunetSpeciesFields({{ declare | stmwrap(80, 36) }}) == FAIL) {
      ENZO_FAIL("Error in grid->IdentifyNaunetSpeciesFields.\n");
    }
 
  // Get easy to handle pointers for each variable.
 
  float *density     = BaryonField[DensNum];
  float *totalenergy = BaryonField[TENum];
  float *gasenergy   = BaryonField[GENum];
  float *velocity1   = BaryonField[Vel1Num];
  float *velocity2   = BaryonField[Vel2Num];
  float *velocity3   = BaryonField[Vel3Num];

  // Compute the cooling time.

  FLOAT a = 1.0, dadt;
  float TemperatureUnits = 1, DensityUnits = 1, LengthUnits = 1,
        VelocityUnits = 1, TimeUnits = 1, aUnits = 1;

  GetUnits(&DensityUnits, &LengthUnits, &TemperatureUnits,
           &TimeUnits, &VelocityUnits, Time);

  if (ComovingCoordinates) {
    CosmologyComputeExpansionFactor(Time+0.5*dt_chem, &a, &dadt);
    aUnits = 1.0/(1.0 + InitialRedshift);
  } 
  else if (RadiationFieldRedshift > -1){
    a        = 1.0 / (1.0 + RadiationFieldRedshift);
    aUnits   = 1.0;
  }
  float afloat = float(a);

  float *temperature = new float[size]; 
  if (this->ComputeTemperatureField(temperature) == FAIL){
    ENZO_FAIL("Error in grid->ComputeTemperatureField.");
  }

  float NumberDensityUnits = DensityUnits / mh;

  Naunet naunet;
  naunet.Init();

  // TODO: comoving, heating/cooling
  {% if device == "cpu" %}

  // Set your parameters here
  NaunetData data;

  float y[NEQUATIONS];

  for (k = GridStartIndex[2]; k <= GridEndIndex[2]; k++) {
    for (j = GridStartIndex[1]; j <= GridEndIndex[1]; j++) {
      igrid = (k * GridDimension[1] + j) * GridDimension[0] + GridStartIndex[0];
      for (i = GridStartIndex[0]; i <= GridEndIndex[0]; i++, igrid++) {

        data.nH = BaryonField[iden][i] * DensityUnits / (1.4 * mh);
        data.Tgas = temperature[igrid];

        {% for ab in abund -%}
          {{ ab }};
        {% endfor %}

        if (naunet.Solve(y, dt_chem * TimeUnits, &data) == NAUNET_FAIL) {    
          naunet.Finalize();
          ENZO_FAIL("Naunet failed in NaunetWrapper.C!");
        }

        {% for iab in invabund -%}
          {{ iab }};
        {% endfor %}

      }
    }
  }
  
  {% else %}

  int sidx;

  // Solve a slice in active space every step
  int slicesize = (GridEndIndex[1] - GridStartIndex[1]) * (GridEndIndex[0] - GridStartIndex[0]);
  naunet.Reset(slicesize);

  NaunetData *data = new NaunetDate[slicesize];

  for (k = GridStartIndex[2]; k <= GridEndIndex[2]; k++) {
    sidx = 0;
    for (j = GridStartIndex[1]; j <= GridEndIndex[1]; j++) {
      igrid = (k * GridDimension[1] + j) * GridDimension[0] + GridStartIndex[0];
      for (i = GridStartIndex[0]; i <= GridEndIndex[0]; i++, igrid++, sidx++) {

        data[sidx].nH = BaryonField[iden][igrid] * DensityUnits / (1.4 * mh);
        data[sidx].Tgas = temperature[igrid];

        {% for ab in abund -%}
          {{ ab }};
        {% endfor %}

        if (naunet.Solve(y, dt_chem * TimeUnits, data) == NAUNET_FAIL) {    
          naunet.Finalize();
          ENZO_FAIL("Naunet failed in NaunetWrapper.C!");
        }

        {% for iab in invabund -%}
          {{ iab }};
        {% endfor %}

      }
    }
  }


  // Solve cells as many as possible, but including ghost zone

  // int cur = 0;

  // while (cur < size) {
  //   int nsystem = MAX_NSYSTEMS;
  //   if (size - cur < MAX_NSYSTEMS) {
  //     nsystem = size - cur;
  //     naunet.Reset(nsystem);
  //   }
  //   cur += MAX_NSYSTEMS;

  //   // set your parameters here
  //   NaunetData *data = new NaunetData[nsystem];
  //   for (i=0; i<nsystem; i++) {
  //     data[i].nH = BaryonField[iden][i] / (Mu * mh);
  //   }

  //   float *y = new double[nsystem * NEQUATIONS];

  //   for (sidx=0, i=cur; i<cur+nsystem; sidx+=NEQUATIONS, i++) {
  //     {% for ab in abund -%}
  //       {{ ab }};
  //     {% endfor %}
  //   }

  //   naunet.Solve(y, dt_chem * TimeUnits, data);

  //   for (sidx=0, i=cur; i<cur+nsystem; sidx+=NEQUATIONS, i++) {
  //     {% for iab in invabund -%}
  //       {{ iab }};
  //     {% endfor %}
  //   }
  // }

  {% endif %}

  naunet.Finalize();

  delete [] temperature;

  delete [] g_grid_dimension;
  delete [] g_grid_start;
  delete [] g_grid_end;

  LCAPERF_STOP("grid_NaunetWrapper");
#endif

  return SUCCESS;
}

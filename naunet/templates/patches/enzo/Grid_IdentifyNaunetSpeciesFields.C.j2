/***********************************************************************
/
/  GRID CLASS (IDENTIFY THE MULTI-SPECIES FIELDS)
/
/  written by: Chia-Jung Hsu, Patch generated by naunet
/  date:       2021
/
************************************************************************/
// clang-format off
#include "preincludes.h"
#ifdef USE_NAUNET
#include "naunet_enzo.h"
#endif
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"

/* function prototypes */

int FindField(int f, int farray[], int n);

#ifdef USE_NAUNET

{% set specnum = species.network | map(attribute="alias") | map("suffix", "Num") %}

int grid::IdentifyNaunetSpeciesFields({{ specnum | map('prefix', "int &") | join(", ") | stmwrap(80, 38) }})
{
    {% set specnum = species.network | map(attribute="alias") | map("suffix", "Num") -%}
    {{ specnum | join(" = ") | stmwrap(80, 4) }} = 0;

    // Find Fields for the Naunet species
    {% set specnum = species.network | map(attribute="alias") | map("suffix", "Num") -%}
    {% for n, s in zip(specnum, species.network) -%}
        {{ n }} = FindField({{ "Electron" if s.is_electron else s.alias }}Density, FieldType, NumberOfBaryonFields);
    {% endfor -%}

    // check fields exist
    {% set specnum = species.network | map(attribute="alias") | map("suffix", "Num") -%}
    {% for n in specnum -%}
        if ({{ n }} < 0) ENZO_VFAIL("{{ n }}=%" ISYM "\n", {{ n }});
    {% endfor -%}

    return SUCCESS;
}

int grid::IdentifyNaunetSpeciesFields(int *specnum)
{

    const field_type NauentFields[114] = {
        {% for s in species.network -%}
        {{ "Electron" if s.is_electron else s.alias }}Density{{ ",\n        " if not loop.last else "\n" }}
        {%- endfor %}
    };

    for (int sidx = 0; sidx < NSPECIES; sidx ++) {
        specnum[sidx] = FindField(NauentFields[sidx], FieldType, NumberOfBaryonFields);
        if (specnum[sidx] < 0) {
            ENZO_VFAIL("specnum[%" ISYM "]=%" ISYM "\n", sidx, specnum[sidx]);
        }
    }

    return SUCCESS;
}


#endif

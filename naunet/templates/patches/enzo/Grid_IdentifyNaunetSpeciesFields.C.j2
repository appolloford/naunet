/***********************************************************************
/
/  GRID CLASS (IDENTIFY THE MULTI-SPECIES FIELDS)
/
/  written by: Chia-Jung Hsu, Patch generated by naunet
/  date:       2021
/
************************************************************************/
// clang-format off
#include "preincludes.h"
#ifdef USE_NAUNET
#include "naunet_enzo.h"
#endif
#include "macros_and_parameters.h"
#include "typedefs.h"
#include "global_data.h"
#include "Fluxes.h"
#include "GridList.h"
#include "ExternalBoundary.h"
#include "Grid.h"

/* function prototypes */

int FindField(int f, int farray[], int n);

#ifdef USE_NAUNET

int grid::IdentifyNaunetSpeciesFields({{ arguments | stmwrap(80, 38) }})
{
    {{ initial | stmwrap(80, 4) }};

    // Find Fields for the Naunet species
    {% for f in findfield -%}
        {{ f }}
    {% endfor -%}

    // check fields exist
    {% for c in check -%}
        {{ c }};
    {% endfor -%}

    return SUCCESS;
}

int grid::IdentifyNaunetSpeciesFields(int *specnum)
{

    const field_type NauentFields[114] = {
        {% for s in species -%}
        {{ "Electron" if s.iselectron else s.alias }}Density{{ ",\n        " if not loop.last else "\n    " }}
        {%- endfor -%}
    };

    for (int sidx = 0; sidx < NSPECIES; sidx ++) {
        specnum[sidx] = FindField(NauentFields[sidx], FieldType, NumberOfBaryonFields);
        if (specnum[sidx] < 0) {
            ENZO_VFAIL("specnum[%" ISYM "]=%" ISYM "\n", sidx, specnum[sidx]);
        }
    }

    return SUCCESS;
}


#endif

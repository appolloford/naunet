# test on Ubuntu
name: ubuntu

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'notebooks/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - 'notebooks/**'

jobs:

  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        cuda: ["10.2", "11.0"]
        python: [3.8, 3.9]
        boost: [1.71, 1.65]

        exclude:
          - os: ubuntu-latest
            boost: 1.65
          - os: ubuntu-18.04
            boost: 1.71

    env:
      build_dir: "build"
      config: "Release"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install BLAS & LAPACK
        run: sudo apt-get install libblas-dev liblapack-dev

      - name: Cache boost
        uses: actions/cache@v2
        id: boost
        with:
          path: ~/boost
          key: ${{ matrix.os }}-boost-${{ matrix.boost }}
          
      - name: Install boost
        env:
          CACHE_HIT: ${{ steps.boost.outputs.cache-hit }}
          VERSION: ${{ matrix.boost }}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/boost/* /
          else
            sudo apt-get update && sudo apt-get install -yq libboost${VERSION}-dev
            mkdir -p ~/boost
            for dep in libboost${VERSION}-dev; do
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
            done
          fi
          
      - name: Install SuiteSparse dependencies
        run: sudo apt-get install libgmp3-dev libmpc-dev

      - name: Cache SuiteSparse
        uses: actions/cache@v2
        id: suitesparse
        with:
          path: ~/suitesparse
          key: ${{ matrix.os }}-suitesparse

      - name: Install SuiteSparse
        env:
          CACHE_HIT: ${{ steps.suitesparse.outputs.cache-hit }}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/suitesparse /usr/local/suitesparse
          else
            source ./scripts/actions/install_suitesparse.sh
          fi

      # Use the script from https://github.com/ptheywood/cuda-cmake-github-actions
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: source ./scripts/actions/install_cuda_ubuntu.sh
        shell: bash

      - name: Cache SUNDIALS
        uses: actions/cache@v2
        id: sundials
        with:
          path: ~/sundials
          key: ${{ matrix.os }}-sundials

      - name: Install SUNDIALS
        env:
          CACHE_HIT: ${{ steps.sundials.outputs.cache-hit }}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/sundials /usr/local/sundials
          else
            source ./scripts/actions/install_sundials.sh
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Set up poetry
        uses: Gr1N/setup-poetry@v7

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ matrix.os }}-python${{ matrix.python }}-poetry-${{ hashFiles('poetry.lock') }}

      # `poetry shell` doesn't work
      - name: Install package dependencies and active virtual env
        run: |
          poetry --version 
          poetry install
          source $(poetry env info --path)/bin/activate
          naunet --version

      - name: Pytest
        run: |
          source $(poetry env info --path)/bin/activate
          pytest -rs -o log_cli=true -o log_cli_level=DEBUG --runslow test

      - name: Create naunet examples
        run: |
          source $(poetry env info --path)/bin/activate
          source ./scripts/actions/create_examples.sh

      - name: Build naunet examples
        run: source ./scripts/actions/build_examples.sh

      - name: Test naunet examples
        run: source ./scripts/actions/test_examples.sh

# test on Ubuntu
name: ubuntu

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  install:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-18.04, ubuntu-16.04, windows-latest, macos-latest]
        python: [3.7, 3.8]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Pyhon
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - uses: Gr1N/setup-poetry@v4

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - run: poetry --version

      - name: Install package dependencies
        run: poetry install

      - name: Pytest
        run: poetry run pytest -rs -o log_cli=true -o log_cli_level=DEBUG --runslow test
        
      - name: Test console command
        run: naunet example --select=0
        
  build:
    needs: install
    
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            cuda: "11.0"
            python: "3.8"

          - os: ubuntu-18.04
            cuda: "10.2"
            python: "3.8"

    env:
      build_dir: "build"
      config: "Release"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install BLAS & LAPACK
        run: sudo apt-get install libblas-dev liblapack-dev
        
      - name: Install SuiteSparse dependencies
        run: sudo apt-get install libgmp3-dev libmpc-dev

      - name: Cache SuiteSparse
        uses: actions/cache@v2
        id: suitesparse
        with:
          path: /usr/local/suitesparse
          key: ${{ matrix.os }}-suitesparse

      - name: Install SuiteSparse
        if: steps.suitesparse.outputs.cache-hit != 'true'
        run: |
          cd $HOME
          wget https://github.com/DrTimothyAldenDavis/SuiteSparse/archive/refs/tags/v5.9.0.tar.gz 
          tar -zxvf v5.9.0.tar.gz && cd SuiteSparse-5.9.0
          make library -j4
          sudo make install INSTALL=/usr/local/suitesparse
      # Use the script from https://github.com/ptheywood/cuda-cmake-github-actions
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: |
          source ./scripts/actions/install_cuda_ubuntu.sh
          if [[ $? -eq 0 ]]; then
            # Set paths for subsequent steps, using ${CUDA_PATH}
            echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
            echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
            echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Cache SUNDIALS
        uses: actions/cache@v2
        id: sundials
        with:
          path: /usr/local/sundials
          key: ${{ matrix.os }}-sundials

      - name: Install SUNDIALS
        if: steps.sundials.outputs.cache-hit != 'true'
        run: |
          cd $HOME
          wget https://github.com/LLNL/sundials/releases/download/v5.7.0/sundials-5.7.0.tar.gz
          tar -zxvf sundials-5.7.0.tar.gz
          mkdir build-sundials && cd build-sundials
          cmake ../sundials-5.7.0 -DCMAKE_INSTALL_PREFIX=/usr/local/sundials \
                -DENABLE_CUDA=ON -DCMAKE_CUDA_COMPILER=nvcc \
                -DCMAKE_CUDA_ARCHITECTURES=61 -DSUNDIALS_INDEX_SIZE=32 \
                -DENABLE_KLU=ON -DKLU_INCLUDE_DIR=/usr/local/suitesparse/include \
                -DKLU_LIBRARY_DIR=/usr/local/suitesparse/lib -DEXAMPLES_ENABLE_C=OFF \
                -DEXAMPLES_ENABLE_CUDA=OFF -DEXAMPLES_INSTALL=OFF
          make -j4 && sudo make install
